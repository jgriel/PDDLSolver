(define (domain sokorobotto)
  (:requirements :typing)
  (:types shipment order location robot pallette saleitem)
  (:predicates 
      (includes ?x ?y)        
      (ships ?s ?o)           
      (orders ?o ?si)          
      (unstarted ?s)          
      (packing-location ?l)
      (available ?l)         
      (contains ?p ?si)       
      (free ?r)               
      (connected ?x ?y)       
      (at ?x ?l) 
      (no-robot ?l)
      (no-pallette ?l)
  )
  
  (:action begin-shipment
      :parameters(?s ?o ?l)
      :precondition(and (unstarted ?s) (ships ?s ?o) (available ?l))
      :effect(and (not (unstarted ?s)) (not (available ?l)) (packing-location ?l))
  )
  
  (:action robot-move-without-pallette
      :parameters(?r ?start ?end)
      :precondition(and (at ?r ?start) (not (at ?r ?end)) 
                        (free ?r)
                        (no-robot ?end)
                        (connected ?start ?end)
      ) 
      :effect(and (at ?r ?end) (not (at ?r ?start))
                  (no-robot ?start)
                  (not (no-robot ?end))
      )
  ) 
  
  (:action robot-move-wtih-pallette
      :parameters(?r ?p ?start ?end)
      :precondition(and (at ?r ?start) 
                        (not (at ?r ?end))
                        (at ?p ?start)
                        (not (at ?p ?end))
                        (not (free ?r))
                        (no-robot ?end)
                        (no-pallette ?end)
                        (connected ?start ?end)
      ) 
      :effect(and (at ?r ?end) 
                  (not (at ?r ?start))
                  (at ?p ?end)
                  (not (at ?p ?start))
                  (no-pallette ?start)
                  (not (no-pallette ?end))
                  (no-robot ?start)
                  (not (no-robot ?end))
                     
      )
  ) 
  
  (:action robot-pickup-pallette
      :parameters(?l ?r ?p)
      :precondition(and (at ?r ?l) (at ?p ?l)
                        (not (no-pallette ?l))
                        (not (no-robot ?l))
                        (free ?r)
      ) 
      :effect(and (not (free ?r)) )
  )

  (:action robot-drop-pallette
      :parameters(?l ?p ?r)
      :precondition(and (at ?r ?l) (at ?p ?l)
                        (not (no-pallette ?l))
                        (not (no-robot ?l))
                        (not (free ?r)) 
      )
      :effect(and (free ?r) ) 
  )
  
  (:action pack-item
      :parameters(?r ?l ?s ?o ?si ?p)
      :precondition(and (at ?r ?l) (at ?p ?l) 
                        (not (no-robot ?l)) (not (no-pallette ?l))
                        (not (free ?r))
                        (not (unstarted ?s))
                        (packing-location ?l)
                        (ships ?s ?o)
                        (orders ?o ?si)
                        (contains ?p ?si)
                        (not (includes ?s ?si))
      )
      :effect(and (includes ?s ?si) (not (contains ?p ?si)) )
  )

  (:action end-shipment
      :parameters(?s ?o ?l)
      :precondition (and (not (unstarted ?s)) (ships ?s ?o) (not (available ?l)) (packing-location ?l))
      :effect(and (available ?l) (not (packing-location ?l)) )
  )
)
